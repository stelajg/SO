Nume: Josan-Gulica Stela
Grupă: 336CC

Tema 1

1. Pentru crearea unui hashMap am folosit un vector de marimea 28 care conținea
fiecare un nod HashMap. Am ales marimea 28, fiindcă sunt 28 de caractere
admisibile pentru prima litera/simbol dintr-un macro și am pus impreuna
majusculele cu minusculele. Apoi, funcția de calcul a  hash codului returnează
locația în funcție de prima litera. Toate functionalitatile HashMap-ului se 
afla în fișierele cu același nume și se bazează pe structura de date lista. 
Anumite functionalitati a listei le-am luat din laboratorul de Structuri de 
Date din anul 1. Consider ca implementarea este putin naiva, fiindca aproape
niciodată nu vom avea mai mult de 5-6 define-uri într-un fișier,
dar cred ca este eficientă din punct de vedere al căutării.

2. Nu am implementat întreg enunț al temei. Nu am implementat partea cu 
include. Funcționalitățile lipsa din enunț sunt prezente în ceea ce privește
argumentele pe care le primește executabilul. La început, mi-a luat mult timp
sa înțeleg ca fișierul de output poate sa nu existe și să fie output-ul
la stdout sau dacă avem 2 fișier ca argumente al doilea fișier este de output.
Pentru fiecare parte pe care trebuia sa o facem, am creat cate o funcție
aparte și prin numele funcției se subînțelege ce face. Mai mult, la aceasta
tema am lucrat cu șirurile și toate funcțiile posibile din biblioteca
string.h, am luat linie cu linie fișierul de input și în urma analizării lor
am scris în fișierul de output. 

3.Executabilul se rulează cu argumente sau e posibil și fără argumente,
atunci inputul și outputul vor fi stdin și stdout. Build se face din
2 fisiere obiect hashmap.o si main.o, care sunt create în urma asamblari
unde codul din limbajul de asamblare este transformat în cod mașină, 
avem nevoie de ambele fișiere obiect pentru linkare, deoarece anumite 
functiuni si structuri din hashmap.c sunt folosite in main.c și pentru
a identifica simbolurile.

4.Bibliografie
https://c-for-dummies.com/blog 
https://www.geeksforgeeks.org/ 

